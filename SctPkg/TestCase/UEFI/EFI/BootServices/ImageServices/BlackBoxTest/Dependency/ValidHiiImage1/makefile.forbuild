## @file
#
#  Copyright 2006 - 2010 Unified EFI, Inc.<BR>
#  Copyright (c) 2010, Byosoft Corporation. All rights reserved.<BR>
#
#  This program and the accompanying materials
#  are licensed and made available under the terms and conditions of the BSD License
#  which accompanies this distribution.  The full text of the license may be found at 
#  http://opensource.org/licenses/bsd-license.php
# 
#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
# 
##
#/*++
#
#  DO NOT EDIT
#  File auto-generated by build utility
#
#  Module Name:
#
#    makefile
#
#  Abstract:
#
#    Auto-generated makefile for building of EFI components/libraries
#
#--*/


GENBIN=$(EDK_TOOLS_PATH)\Bin\Win32\GenBin
FWIMAGE=$(EDK_TOOLS_PATH)\Bin\Win32\FwImage
GENFFSFILE=$(EDK_TOOLS_PATH)\Bin\Win32\GenFfsFile
GENSECTION=$(EDK_TOOLS_PATH)\Bin\Win32\GenSection
HIIPACK=$(EDK_TOOLS_PATH)\Bin\Win32\HiiPack
MAKEDEPS=$(EDK_TOOLS_PATH)\Bin\Win32\MakeDeps
SETSTAMP=$(EDK_TOOLS_PATH)\Bin\Win32\SetStamp
STRGATHER=$(EDK_TOOLS_PATH)\Bin\Win32\StrGather
VFRCOMPILER8=$(EDK_TOOLS_PATH)\Bin\Win32\VfrCompileR8

!IF "$(LANGUAGE)" != ""
LANGUAGE_FLAGS    = -lang $(LANGUAGE)
!ENDIF


!IF "APPLICATION" == "PE32_PEIM" || "APPLICATION" == "RELOCATABLE_PEIM" || "APPLICATION" == "COMBINED_PEIM_DRIVER"
DEPEX_TYPE = EFI_SECTION_PEI_DEPEX
!ELSE
DEPEX_TYPE = EFI_SECTION_DXE_DEPEX
!ENDIF

!MESSAGE ========== Building ImageServices_ValidHiiImage1 - $(MODULE_DIR)\ValidHiiImage1.inf


IMAGE_ENTRY_POINT=InitializeValidHiiImage1
EFI_GENERATE_HII_RESOURCE=YES
LOCALIZE=YES

#
# Tool-generated list of source files that are created
# from the list of source files in the [sources.*] sections
# of the component INF file.
#
SOURCE_FILES = $(SOURCE_FILES) $(MODULE_DIR)\ValidHiiImage1.c
SOURCE_FILES = $(SOURCE_FILES) $(MODULE_DIR)\SampleStrings.uni
SOURCE_FILES = $(SOURCE_FILES) $(MODULE_DIR)\Sample.vfr

#
# Tool-generated list of include paths that are created
# from the list of include paths in the [includes.*] sections
# of the component INF file.
#
INC = $(INC) -I $(MODULE_DIR)
!IF EXIST($(SOURCE_DIR)\X64)
INC = $(INC) -I $(MODULE_DIR)\X64
!ENDIF
!IF EXIST($(EDK_SOURCE)\Foundation)
INC = $(INC) -I $(EDK_SOURCE)\Foundation
!IF EXIST($(EDK_SOURCE)\Foundation\X64)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EDK_SOURCE)\Foundation does not exist
!ENDIF
!IF EXIST($(EDK_SOURCE)\Foundation\Efi)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Efi
!IF EXIST($(EDK_SOURCE)\Foundation\Efi\X64)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Efi\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EDK_SOURCE)\Foundation\Efi does not exist
!ENDIF
!IF EXIST($(EDK_SOURCE)\Foundation\Framework)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Framework
!IF EXIST($(EDK_SOURCE)\Foundation\Framework\X64)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Framework\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EDK_SOURCE)\Foundation\Framework does not exist
!ENDIF
!IF EXIST($(EDK_SOURCE)\Foundation\Include)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Include
!IF EXIST($(EDK_SOURCE)\Foundation\Include\X64)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Include\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EDK_SOURCE)\Foundation\Include does not exist
!ENDIF
!IF EXIST($(EDK_SOURCE)\Foundation\Efi\Include)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Efi\Include
!IF EXIST($(EDK_SOURCE)\Foundation\Efi\Include\X64)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Efi\Include\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EDK_SOURCE)\Foundation\Efi\Include does not exist
!ENDIF
!IF EXIST($(EDK_SOURCE)\Foundation\Framework\Include)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Framework\Include
!IF EXIST($(EDK_SOURCE)\Foundation\Framework\Include\X64)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Framework\Include\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EDK_SOURCE)\Foundation\Framework\Include does not exist
!ENDIF
!IF EXIST($(EDK_SOURCE)\Foundation\Include\IndustryStandard)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Include\IndustryStandard
!IF EXIST($(EDK_SOURCE)\Foundation\Include\IndustryStandard\X64)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Include\IndustryStandard\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EDK_SOURCE)\Foundation\Include\IndustryStandard does not exist
!ENDIF
!IF EXIST($(EDK_SOURCE)\Foundation\Library\Dxe\Include)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Library\Dxe\Include
!IF EXIST($(EDK_SOURCE)\Foundation\Library\Dxe\Include\X64)
INC = $(INC) -I $(EDK_SOURCE)\Foundation\Library\Dxe\Include\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EDK_SOURCE)\Foundation\Library\Dxe\Include does not exist
!ENDIF
!IF EXIST($(EFI_SOURCE))
INC = $(INC) -I $(EFI_SOURCE)
!IF EXIST($(EFI_SOURCE)\X64)
INC = $(INC) -I $(EFI_SOURCE)\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EFI_SOURCE) does not exist
!ENDIF
!IF EXIST($(EFI_SOURCE)\Include)
INC = $(INC) -I $(EFI_SOURCE)\Include
!IF EXIST($(EFI_SOURCE)\Include\X64)
INC = $(INC) -I $(EFI_SOURCE)\Include\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EFI_SOURCE)\Include does not exist
!ENDIF
!IF EXIST($(EFI_SOURCE)\SctPkg\Include)
INC = $(INC) -I $(EFI_SOURCE)\SctPkg\Include
!IF EXIST($(EFI_SOURCE)\SctPkg\Include\X64)
INC = $(INC) -I $(EFI_SOURCE)\SctPkg\Include\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EFI_SOURCE)\SctPkg\Include does not exist
!ENDIF
!IF EXIST($(EFI_SOURCE)\SctPkg\Library\EfiTestLib)
INC = $(INC) -I $(EFI_SOURCE)\SctPkg\Library\EfiTestLib
!IF EXIST($(EFI_SOURCE)\SctPkg\Library\EfiTestLib\X64)
INC = $(INC) -I $(EFI_SOURCE)\SctPkg\Library\EfiTestLib\X64
!ENDIF
!ELSE
!MESSAGE Warning: include dir $(EFI_SOURCE)\SctPkg\Library\EfiTestLib does not exist
!ENDIF

!IF EXIST($(DEST_DIR_OUTPUT))
INC = $(INC) -I $(DEST_DIR_OUTPUT)
!ELSE
!MESSAGE Warning: include dir $(DEST_DIR_OUTPUT) does not exist
!ENDIF

!IF EXIST($(DEST_DIR_DEBUG))
INC = $(INC) -I $(DEST_DIR_DEBUG)
!ELSE
!MESSAGE Warning: include dir $(DEST_DIR_DEBUG) does not exist
!ENDIF


#
# ORIGIN: [Compile.X64.c] section of the platform DSC file
#
DEP_FILE = $(OUTPUT_DIR)\ValidHiiImage1.dep

!IF EXIST($(DEP_FILE))
!INCLUDE $(DEP_FILE)
!ENDIF
#
# This is how to create the dependency file the first time
#
$(DEP_FILE) : $(MODULE_DIR)\ValidHiiImage1.c
  $(MAKEDEPS) -ignorenotfound -f $(MODULE_DIR)\ValidHiiImage1.c -q -target \
    $(OUTPUT_DIR)\ValidHiiImage1.obj -o $(DEP_FILE) $(INC)
#
# Compile the source file
#
$(OUTPUT_DIR)\ValidHiiImage1.obj : $(MODULE_DIR)\ValidHiiImage1.c $(INC_DEPS) $(DEP_FILE)
  $(CC) $(CC_FLAGS) $(MODULE_DIR)\ValidHiiImage1.c



!IF "SampleStrings" == "ImageServices_ValidHiiImage1"
!ERROR Component Unicode string file name cannot be the same as the component BASE_NAME.
!ENDIF

$(OUTPUT_DIR)\SampleStrings.sdb : $(MODULE_DIR)\SampleStrings.uni
  $(STRGATHER) -parse -newdb -db $(OUTPUT_DIR)\SampleStrings.sdb $(INC) $(MODULE_DIR)\SampleStrings.uni

SDB_FILES       = $(SDB_FILES) $(OUTPUT_DIR)\SampleStrings.sdb
STRGATHER_FLAGS = $(STRGATHER_FLAGS) -db $(OUTPUT_DIR)\SampleStrings.sdb
LOCALIZE        = YES



HII_PACK_FILES  = $(HII_PACK_FILES) $(OUTPUT_DIR)\Sample.hpk

#
# Add a dummy command for building the HII pack file. In reality, it's built
# below, but the C_FLAGS macro reference the target as $@, so you can't specify
# the obj and hpk files as dual targets of the same command.
#
$(OUTPUT_DIR)\Sample.hpk : $(OUTPUT_DIR)\Sample.obj
  @echo.

$(OUTPUT_DIR)\Sample.obj : $(MODULE_DIR)\Sample.vfr $(INC_DEPS) $(OUTPUT_DIR)\ImageServices_ValidHiiImage1StrDefs.h
  $(VFRCOMPILER8) $(VFRCOMPILE_FLAGS) $(INC) -ibin -od $(OUTPUT_DIR)\
    -l  $(MODULE_DIR)\Sample.vfr
  $(CC) $(CC_FLAGS) $(OUTPUT_DIR)\Sample.c



#
# Tool-generated list of object files that are created
# from the list of source files in the [sources.*] sections
# of the component INF file.
#
OBJECTS = $(OBJECTS) \
          $(OUTPUT_DIR)\ValidHiiImage1.obj   \
          $(OUTPUT_DIR)\Sample.obj   

#
# Tool-generated list of dest output dirs that are created
# from the list of source files in the [sources.*] sections
# of the component INF file.
#
DEST_OUTPUT_DIRS = $(OUTPUT_DIR) 

#
# Tool-generated list of libraries that are generated
# from the list of libraries listed in the [libraries.*] sections
# of the component INF file.
#
LIBS = $(LIBS)     \
       $(LIB_DIR)\EdkCompatibilityPkg\Foundation\Efi\Guid\EfiGuidLib\OUTPUT\EfiGuidLib.lib    \
       $(LIB_DIR)\EdkCompatibilityPkg\Foundation\Efi\Protocol\EfiProtocolLib\OUTPUT\EfiProtocolLib.lib    \
       $(LIB_DIR)\EdkCompatibilityPkg\Foundation\Library\EfiCommonLib\EfiCommonLib\OUTPUT\EfiCommonLib.lib

#
# ORIGIN: [Build.X64.???] section of the platform DSC file
#
# If this driver supports localization, then we need to run our tools on
# the string files to build them into the driver.
#

#!IF "$(LOCALIZE)" == "YES"




#
# This will generate HII resource section in PE/COFF image.
#
# Note: when HII package list is built into resource section, Driver no longer
# refer to C array generated by VfrCompiler ($(FILE_NAME)Bin) and StrGather
# (ImageServices_ValidHiiImage1Strings); while in current build rule, those C array objects
# will still be linked with the Driver, so please turn on link flag "/OPT:REF"
# to minimize the code size.
#
HII_PACK_FILES   = $(HII_PACK_FILES) $(OUTPUT_DIR)\ImageServices_ValidHiiImage1Strings.hpk
LOCALIZE_TARGETS = $(LOCALIZE_TARGETS) $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.res
LINK_FLAGS_DLL   = $(LINK_FLAGS_DLL) $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.res
DLINK_FLAGS   = $(DLINK_FLAGS) $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.res

$(OUTPUT_DIR)\ImageServices_ValidHiiImage1.rc : $(HII_PACK_FILES)
  $(HIIPACK) -g E106D131-E5F2-4670-A4F5-7BA4FC0829C0 $(HII_PACK_FILES) -rc $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.rc -hii $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.hii

$(OUTPUT_DIR)\ImageServices_ValidHiiImage1.res : $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.rc
  $(RC) /fo $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.res $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.rc




#
# This is how we create our final string database file from all the individual
# string database files created during the build.
#
$(OUTPUT_DIR)\ImageServices_ValidHiiImage1.sdb : $(SDB_FILES) $(SOURCE_FILES)
  $(STRGATHER) -scan -vdbr $(STRGATHER_FLAGS) -od $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.sdb \
    -skipext .uni -skipext .h $(SOURCE_FILES)

$(OUTPUT_DIR)\ImageServices_ValidHiiImage1Strings.c $(OUTPUT_DIR)\ImageServices_ValidHiiImage1StrDefs.h $(OUTPUT_DIR)\ImageServices_ValidHiiImage1Strings.hpk : $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.sdb
  $(STRGATHER) -dump $(LANGUAGE_FLAGS) -bn ImageServices_ValidHiiImage1Strings -db $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.sdb \
    -oc $(OUTPUT_DIR)\ImageServices_ValidHiiImage1Strings.c -hpk $(OUTPUT_DIR)\ImageServices_ValidHiiImage1Strings.hpk -oh $(OUTPUT_DIR)\ImageServices_ValidHiiImage1StrDefs.h

OBJECTS = $(OBJECTS) $(OUTPUT_DIR)\ImageServices_ValidHiiImage1Strings.obj

$(OUTPUT_DIR)\ImageServices_ValidHiiImage1Strings.obj : $(OUTPUT_DIR)\ImageServices_ValidHiiImage1Strings.c
  $(CC) $(CC_FLAGS) $(OUTPUT_DIR)\ImageServices_ValidHiiImage1Strings.c

LOCALIZE_TARGETS = $(LOCALIZE_TARGETS) $(OUTPUT_DIR)\ImageServices_ValidHiiImage1StrDefs.h

#!ENDIF
#
# Defines for standard intermediate files and build targets
#
TARGET_DLL      = $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.dll
TARGET_EFI      = $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.efi
TARGET_DPX      = $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.dpx
TARGET_UI       = $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.ui
TARGET_VER      = $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.ver
TARGET_PDB      = $(DEBUG_DIR)\ImageServices_ValidHiiImage1.pdb
TARGET_PE32     = $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.pe32
#
# Define the target output FFS file name
#
#TARGET_FFS_FILE = $(BUILD_DIR)\X64\E106D131-E5F2-4670-A4F5-7BA4FC0829C0-ImageServices_ValidHiiImage1.ffs
#
# Define the subsystem to use when linking, and the name of
# the FFS file that will be created by GenFfs file.
#
SUBSYSTEM = EFI_BOOT_SERVICE_DRIVER

!IF "APPLICATION" == "APPLICATION"
TARGET_FFS_FILE = $(BUILD_DIR)\X64\E106D131-E5F2-4670-A4F5-7BA4FC0829C0-ImageServices_ValidHiiImage1.app
SUBSYSTEM       = EFI_APPLICATION
!ELSE IF "APPLICATION" == "PEI_CORE"
TARGET_FFS_FILE = $(BUILD_DIR)\X64\E106D131-E5F2-4670-A4F5-7BA4FC0829C0-ImageServices_ValidHiiImage1.pei
!ELSE IF "APPLICATION" == "PE32_PEIM"
TARGET_FFS_FILE = $(BUILD_DIR)\X64\E106D131-E5F2-4670-A4F5-7BA4FC0829C0-ImageServices_ValidHiiImage1.pei
!ELSE IF "APPLICATION" == "RELOCATABLE_PEIM"
TARGET_FFS_FILE = $(BUILD_DIR)\X64\E106D131-E5F2-4670-A4F5-7BA4FC0829C0-ImageServices_ValidHiiImage1.pei
!ELSE IF "APPLICATION" == "PIC_PEIM"
TARGET_FFS_FILE = $(BUILD_DIR)\X64\E106D131-E5F2-4670-A4F5-7BA4FC0829C0-ImageServices_ValidHiiImage1.pei
!ELSE IF "APPLICATION" == "COMBINED_PEIM_DRIVER"
TARGET_FFS_FILE = $(BUILD_DIR)\X64\E106D131-E5F2-4670-A4F5-7BA4FC0829C0-$BASE_NAME).pei
TARGET_DXE_DPX  = $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.dpxd
!ELSE IF "APPLICATION" == "RT_DRIVER"
SUBSYSTEM       = EFI_RUNTIME_DRIVER
TARGET_FFS_FILE = $(BUILD_DIR)\X64\E106D131-E5F2-4670-A4F5-7BA4FC0829C0-ImageServices_ValidHiiImage1.dxe
!ELSE
TARGET_FFS_FILE = $(BUILD_DIR)\X64\E106D131-E5F2-4670-A4F5-7BA4FC0829C0-ImageServices_ValidHiiImage1.dxe
!ENDIF

#
# If we're building a combined PEIM/Driver, then we potentially
# need two depex sections. Define the target dxe depex section
# only if we need it.
#
!IF "APPLICATION" == "COMBINED_PEIM_DRIVER"
TARGET_DXE_DPX  = $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.dpxd
!ENDIF
#
# Link all objects and libs to create the executable *.dll file
#
$(TARGET_DLL) : $(OBJECTS) $(LIBS)
  $(DLINK) $(DLINK_FLAGS) $(OBJECTS) $(LIBS) /ENTRY:$(IMAGE_ENTRY_POINT) \
     /OUT:$(TARGET_DLL)

#
# Run FWImage on the .dll file to create the .efi file
#
$(TARGET_EFI) : $(TARGET_DLL)
  $(FWIMAGE) -t 0 -e APPLICATION $(TARGET_DLL) $(TARGET_EFI)
  $(SETSTAMP) $(TARGET_EFI) $(BIN_DIR)\GenStamp.txt
  $(CP) $(TARGET_EFI) $(DEBUG_DIR)
  $(CP) $(TARGET_EFI) $(BIN_DIR)
  -$(CP) $(DEBUG_DIR)\*.map $(OUTPUT_DIR)
  
  
#
# Run GenSection on the .efi file to create an FFS section file
#
$(TARGET_PE32) : $(TARGET_EFI) $(MODULE_DIR)\ValidHiiImage1.inf
  $(GENSECTION) -I $(TARGET_EFI) -O $(TARGET_PE32) -S EFI_SECTION_PE32
#
# Run GenSection to create a user interface section (even if it's not used)
#
$(TARGET_UI) : $(MODULE_DIR)\ValidHiiImage1.inf
  $(GENSECTION) -O $(TARGET_UI) -S EFI_SECTION_USER_INTERFACE -A "ImageServices_ValidHiiImage1"
#
# Run GenSection to create the version section
#

!IF "$(BUILD_NUMBER)" != ""
!IF "$(VERSION_STRING)" != ""
$(TARGET_VER) : $(MODULE_DIR)\ValidHiiImage1.inf
  $(GENSECTION) -O $(TARGET_VER) -S EFI_SECTION_VERSION -V $(BUILD_NUMBER) -A "$(VERSION_STRING)"
!ELSE
$(TARGET_VER) : $(MODULE_DIR)\ValidHiiImage1.inf
  $(GENSECTION) -O $(TARGET_VER) -S EFI_SECTION_VERSION -V $(BUILD_NUMBER)
!ENDIF
!ELSE
$(TARGET_VER) : $(MODULE_DIR)\ValidHiiImage1.inf
  echo.>$(TARGET_VER)
  type $(TARGET_VER)>$(TARGET_VER)
!ENDIF

#
# Makefile entries to create the dependency expression section.
# Use the DPX file from the source directory unless an override file
# was specified.
# If no DPX source file was specified, then create an empty file to
# be used.
#
!IF "$(DPX_SOURCE)" != ""
DPX_SOURCE_FILE = $(MODULE_DIR)\$(DPX_SOURCE)
!ENDIF

!IF "$(DPX_SOURCE_OVERRIDE)" != ""
DPX_SOURCE_FILE = $(DPX_SOURCE_OVERRIDE)
!ENDIF

!IF "$(DPX_SOURCE_FILE)" != ""
!IF EXIST ($(DPX_SOURCE_FILE))
$(TARGET_DPX) : $(DPX_SOURCE_FILE) $(MODULE_DIR)\ValidHiiImage1.inf
  $(CC) $(INC) /EP $(DPX_SOURCE_FILE) > $*.tmp1
  $(GENDEPEX) -I $*.tmp1 -O $*.tmp2
  $(GENSECTION) -I $*.tmp2 -O $@ -S $(DEPEX_TYPE)
  del $*.tmp1 > NUL
  del $*.tmp2 > NUL
!ELSE
!MESSAGE $(MODULE_DIR)\ValidHiiImage1.inf (1) : error 0001 : $(DPX_SOURCE_FILE) dependency source file does not exist
!ERROR Dependency expression source file "$(DPX_SOURCE_FILE)" does not exist.
!ENDIF
!ELSE
$(TARGET_DPX) : $(MODULE_DIR)\ValidHiiImage1.inf
  echo. > $(TARGET_DPX)
  type $(TARGET_DPX) > $(TARGET_DPX)
!ENDIF

#
# Makefile entries for DXE DPX for combined PEIM drivers.
# If a DXE_DPX_SOURCE file was specified in the INF file, use it. Otherwise
# create an empty file and use it as a DPX file.
#
!IF "APPLICATION" == "COMBINED_PEIM_DRIVER"
!IF "$(DXE_DPX_SOURCE)" != ""

!IF EXIST ($(SOURCE_DIR)\$(DXE_DPX_SOURCE))
$(TARGET_DXE_DPX) : $(MODULE_DIR)\$(DXE_DPX_SOURCE) $(OUTPUT_DIR)\ValidHiiImage1.inf
  $(CC) $(INC) /EP $(MODULE_DIR)\$(DXE_DPX_SOURCE) > $*.tmp1
  $(GENDEPEX) -I $*.tmp1 -O $*.tmp2
  $(GENSECTION) -I $*.tmp2 -O $@ -S EFI_SECTION_DXE_DEPEX
  del $*.tmp1 > NUL
  del $*.tmp2 > NUL
!ELSE
!MESSAGE $(MODULE_DIR)\ValidHiiImage1.inf (1) : error 0001 : $(DXE_DPX_SOURCE) dependency source file does not exist
!ERROR Dependency expression source file "$(SOURCE_DIR)\$(DXE_DPX_SOURCE)" does not exist.
!ENDIF
!ELSE
$(TARGET_DXE_DPX) : $(MODULE_DIR)\ValidHiiImage1.inf
  echo. > $(TARGET_DXE_DPX)
  type $(TARGET_DXE_DPX) > $(TARGET_DXE_DPX)
!ENDIF
!ENDIF

#
# Describe how to build the HII export file from all the input HII pack files.
# Use the FFS file GUID for the package GUID in the export file. Only used
# when multiple VFR share strings.
#
$(OUTPUT_DIR)\ImageServices_ValidHiiImage1.hii : $(HII_PACK_FILES)
  $(HIIPACK) create -g E106D131-E5F2-4670-A4F5-7BA4FC0829C0 -p $(HII_PACK_FILES) -o $(OUTPUT_DIR)\ImageServices_ValidHiiImage1.hii
#
# If the build calls for creating an FFS file with the IFR included as
# a separate binary (not compiled into the driver), then build the binary
# section now. Note that the PACKAGE must be set correctly to actually get
# this IFR section pulled into the FFS file.
#
!IF ("$(HII_IFR_PACK_FILES)" != "")

$(OUTPUT_DIR)\ImageServices_ValidHiiImage1IfrBin.sec : $(HII_IFR_PACK_FILES)
  $(HIIPACK) create -novarpacks -p $(HII_IFR_PACK_FILES) -o $(OUTPUT_DIR)\ImageServices_ValidHiiImage1IfrBin.hii
  $(GENSECTION) -I $(OUTPUT_DIR)\ImageServices_ValidHiiImage1IfrBin.hii -O $(OUTPUT_DIR)\ImageServices_ValidHiiImage1IfrBin.sec -S EFI_SECTION_RAW

BIN_TARGETS = $(BIN_TARGETS) $(OUTPUT_DIR)\ImageServices_ValidHiiImage1IfrBin.sec

!ENDIF

#
# Final step -- build the FFS file from the sections
#
$(TARGET_FFS_FILE) : $(TARGET_PE32) $(TARGET_DPX) $(TARGET_UI) $(TARGET_VER) $(TARGET_DXE_DPX)
  $(GENFFSFILE) -B $(OUTPUT_DIR) -P1 $(MODULE_BUILD_DIR)\ImageServices_ValidHiiImage1.pkg -V

  
  
all: $(LOCALIZE_TARGETS) $(BIN_TARGETS) $(TARGET_PE32)

